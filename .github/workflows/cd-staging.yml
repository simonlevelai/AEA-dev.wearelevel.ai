name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20.x'
  ENVIRONMENT: 'staging'
  RESOURCE_GROUP: 'rg-askeve-staging'
  LOCATION: 'uksouth'

jobs:
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    environment: staging
    
    outputs:
      deployment-id: ${{ steps.generate-id.outputs.deployment-id }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate deployment ID
        id: generate-id
        run: echo "deployment-id=staging-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run critical tests only
        if: github.event.inputs.force_deploy != 'true'
        run: |
          npm run test:safety
          npm run test:integration
        env:
          CI: true
          
      - name: Security scan
        if: github.event.inputs.force_deploy != 'true'
        run: npm audit --production --audit-level high
        
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: pre-deployment
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
          
      - name: Create resource group
        run: |
          az group create \
            --name ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }}
            
      - name: Deploy infrastructure
        id: deploy-infra
        run: |
          DEPLOYMENT_NAME="${{ needs.pre-deployment.outputs.deployment-id }}"
          
          echo "üèóÔ∏è Deploying infrastructure..."
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "$DEPLOYMENT_NAME" \
            --template-file deploy/arm-template.json \
            --parameters @deploy/parameters/staging.parameters.json \
            --parameters alertEmail="${{ secrets.ALERT_EMAIL }}" \
            --output table
            
      - name: Deploy cost monitoring
        run: |
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "cost-alerts-${{ needs.pre-deployment.outputs.deployment-id }}" \
            --template-file monitoring/cost-alerts.json \
            --parameters resourceGroupName="${{ env.RESOURCE_GROUP }}" \
            --parameters alertEmail="${{ secrets.ALERT_EMAIL }}" \
            --parameters environment="${{ env.ENVIRONMENT }}" \
            --output table
            
      - name: Get deployment outputs
        id: outputs
        run: |
          OUTPUTS=$(az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "${{ needs.pre-deployment.outputs.deployment-id }}" \
            --query properties.outputs \
            --output json)
            
          echo "app-service-name=$(echo "$OUTPUTS" | jq -r '.appServiceName.value')" >> $GITHUB_OUTPUT
          echo "app-service-url=$(echo "$OUTPUTS" | jq -r '.appServiceUrl.value')" >> $GITHUB_OUTPUT
          echo "key-vault-name=$(echo "$OUTPUTS" | jq -r '.keyVaultName.value')" >> $GITHUB_OUTPUT
          
    outputs:
      app-service-name: ${{ steps.outputs.outputs.app-service-name }}
      app-service-url: ${{ steps.outputs.outputs.app-service-url }}
      key-vault-name: ${{ steps.outputs.outputs.key-vault-name }}
      
  configure-secrets:
    name: Configure Secrets
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-infrastructure]
    environment: staging
    
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
          
      - name: Configure Key Vault secrets
        run: |
          KEY_VAULT_NAME="${{ needs.deploy-infrastructure.outputs.key-vault-name }}"
          
          echo "üîê Configuring secrets in Key Vault: $KEY_VAULT_NAME"
          
          # Set secrets from GitHub secrets
          az keyvault secret set \
            --vault-name "$KEY_VAULT_NAME" \
            --name "openai-api-key" \
            --value "${{ secrets.OPENAI_API_KEY_STAGING }}"
            
          az keyvault secret set \
            --vault-name "$KEY_VAULT_NAME" \
            --name "teams-webhook-url" \
            --value "${{ secrets.TEAMS_WEBHOOK_STAGING }}"
            
          echo "‚úÖ Secrets configured successfully"
          
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-infrastructure, configure-secrets]
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Build application
        run: |
          npm ci --production
          npm run build
          
      - name: Deploy to App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy-infrastructure.outputs.app-service-name }}
          package: .
          
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application]
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for application startup
        run: sleep 60
        
      - name: Health check
        run: |
          APP_URL="${{ needs.deploy-infrastructure.outputs.app-service-url }}"
          HEALTH_URL="${APP_URL}/health"
          
          echo "üîç Checking application health: $HEALTH_URL"
          
          # Retry health check
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i failed, retrying..."
              sleep 30
            fi
            
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              exit 1
            fi
          done
          
      - name: Run smoke tests
        run: |
          APP_URL="${{ needs.deploy-infrastructure.outputs.app-service-url }}"
          npm run test:smoke -- --url "$APP_URL"
          
      - name: Validate safety systems
        run: |
          APP_URL="${{ needs.deploy-infrastructure.outputs.app-service-url }}"
          npm run test:safety:integration -- --url "$APP_URL"
          
  cost-monitoring:
    name: Cost Monitoring Setup
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application, post-deployment]
    environment: staging
    
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
          
      - name: Validate cost alerts
        run: |
          echo "üí∞ Validating cost monitoring setup..."
          
          # Check if budget exists
          BUDGET_EXISTS=$(az consumption budget list \
            --resource-group-name ${{ env.RESOURCE_GROUP }} \
            --query "length(value[?contains(name, 'askeve')])")
            
          if [ "$BUDGET_EXISTS" -gt 0 ]; then
            echo "‚úÖ Budget alerts configured"
          else
            echo "‚ùå Budget alerts not found"
            exit 1
          fi
          
      - name: Generate cost report
        run: |
          echo "üìä Staging Environment Cost Setup:" >> $GITHUB_STEP_SUMMARY
          echo "- Budget Limit: ¬£35/month" >> $GITHUB_STEP_SUMMARY
          echo "- Alerts configured at key thresholds" >> $GITHUB_STEP_SUMMARY
          echo "- Email notifications: ${{ secrets.ALERT_EMAIL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Group: ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          
  notify-deployment:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application, post-deployment, cost-monitoring]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.post-deployment.result == 'success' && needs.cost-monitoring.result == 'success'
        run: |
          echo "üéâ Staging deployment completed successfully!"
          echo ""
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ needs.deploy-infrastructure.outputs.app-service-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group:** ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cost Monitoring:** ‚úÖ Configured" >> $GITHUB_STEP_SUMMARY
          echo "- **Safety Systems:** ‚úÖ Validated" >> $GITHUB_STEP_SUMMARY
          echo "- **UK Compliance:** ‚úÖ ${{ env.LOCATION }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Staging deployment failed"
          echo "Check the workflow logs for details"
          
      - name: Teams notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.TEAMS_WEBHOOK_STAGING }}
          text: |
            Ask Eve Assist Staging Deployment: ${{ job.status }}
            Environment: ${{ env.ENVIRONMENT }}
            URL: ${{ needs.deploy-infrastructure.outputs.app-service-url }}
            Commit: ${{ github.sha }}