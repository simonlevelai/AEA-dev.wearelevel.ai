#!/usr/bin/env npx ts-node

/**
 * Ask Eve Assist - WORKING Multi-Agent System
 * Real implementation that actually compiles and runs
 * Focus: Get the multi-agent healthcare system working with <500ms crisis detection
 */

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import { AzureOpenAI } from 'openai';
import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

// Import our actual working agents (not the fictional M365 SDK ones)
import { SafetyAgent } from './agents/SafetyAgent';
import { ContentAgent } from './agents/ContentAgent';
import { EscalationAgent } from './agents/EscalationAgent';
import { ChatManager } from './services/ChatManager';
import { Logger } from './utils/logger';

dotenv.config();

/**
 * WORKING Multi-Agent Healthcare System
 * This implementation focuses on functionality over fictional APIs
 */
async function startWorkingMultiAgentSystem(): Promise<void> {
  const logger = new Logger('multi-agent-system');
  
  try {
    logger.info('🚀 Starting WORKING Ask Eve Multi-Agent System...');

    // Initialize real Azure OpenAI
    const azureOpenAI = new AzureOpenAI({
      apiKey: process.env.AZURE_OPENAI_API_KEY,
      endpoint: process.env.AZURE_OPENAI_ENDPOINT,
      apiVersion: '2024-12-01-preview'
    });
    logger.info('✅ Azure OpenAI client initialized');

    // Initialize Supabase
    const supabase = createClient(
      process.env.SUPABASE_URL || '',
      process.env.SUPABASE_ANON_KEY || ''
    );
    logger.info('✅ Supabase client initialized');

    // Create Express app
    const app = express();
    
    app.use(helmet());
    app.use(cors());
    app.use(express.json({ limit: '10mb' }));

    // Initialize WORKING multi-agent system
    logger.info('🤖 Initializing multi-agent healthcare system...');
    
    const chatManager = new ChatManager(logger);
    
    // Create working agent configurations (not fictional M365 SDK configs)
    const safetyAgent = new SafetyAgent(logger, {
      crisisDetectionTimeoutMs: 500, // <500ms requirement
      triggerFiles: {
        crisisTriggersPath: 'data/crisis-triggers.json',
        highConcernTriggersPath: 'data/high-concern-triggers.json', 
        emotionalSupportTriggersPath: 'data/emotional-support-triggers.json'
      },
      emergencyContacts: {
        emergency: '999',
        samaritans: '116 123',
        nhs: '111',
        crisisText: 'Text SHOUT to 85258'
      }
    });

    // Register agents with chat manager
    await chatManager.initialize();
    await chatManager.registerAgent(safetyAgent);
    
    logger.info('✅ Multi-agent system initialized');

    // Health check endpoint
    app.get('/health', async (_req, res) => {
      try {
        const systemHealth = await chatManager.getOrchestrationMetrics();
        res.json({
          status: 'healthy',
          service: 'ask-eve-multiagent',
          timestamp: new Date().toISOString(),
          agents: {
            active: systemHealth.activeAgents,
            registered: chatManager.getActiveAgents()
          }
        });
      } catch (error) {
        res.status(503).json({
          status: 'unhealthy',
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    });

    // Multi-agent chat endpoint
    app.post('/api/v1/chat', async (req, res) => {
      const startTime = Date.now();
      
      try {
        const { message } = req.body;
        
        if (!message) {
          return res.status(400).json({
            error: 'Message is required'
          });
        }

        logger.info('💬 Processing message through multi-agent system', {
          messageLength: message.length
        });

        // Create conversation context
        const conversationContext = {
          conversationId: req.headers['x-conversation-id'] as string || `conv-${Date.now()}`,
          userId: req.headers['x-user-id'] as string || `user-${Date.now()}`,
          sessionId: `session-${Date.now()}`,
          messageHistory: [{
            text: message,
            isUser: true,
            timestamp: Date.now()
          }],
          safetyStatus: 'unknown' as const,
          escalationStatus: 'none' as const,
          metadata: {
            timestamp: Date.now(),
            platform: 'web'
          }
        };

        // Process through multi-agent system
        const response = await chatManager.orchestrateConversation(message, conversationContext);
        
        const responseTime = Date.now() - startTime;
        
        logger.info('✅ Multi-agent processing completed', {
          responseTime,
          success: response.success
        });

        res.json({
          message: response.result?.text || 'I apologize, but I was unable to generate a response.',
          responseTime,
          agentId: response.agentId,
          success: response.success,
          timestamp: new Date().toISOString(),
          multiAgent: true
        });

      } catch (error) {
        const responseTime = Date.now() - startTime;
        logger.error('❌ Multi-agent processing failed', { 
          error: error instanceof Error ? error : new Error(String(error)), 
          responseTime 
        });

        res.status(500).json({
          error: 'Multi-agent system error',
          responseTime,
          message: 'I apologize, but I\'m experiencing technical difficulties. For immediate health support, please call NHS 111.',
          emergencyContacts: {
            emergency: '999',
            samaritans: '116 123',
            nhs: '111'
          }
        });
      }
    });

    // Start server
    const port = parseInt(process.env.PORT || '3978', 10);
    const server = app.listen(port, '0.0.0.0', () => {
      logger.info('🎉 WORKING Multi-Agent System running', {
        port,
        endpoint: `http://localhost:${port}`,
        healthCheck: `http://localhost:${port}/health`,
        apiEndpoint: `http://localhost:${port}/api/v1/chat`
      });
    });

    // Graceful shutdown
    process.on('SIGINT', () => {
      logger.info('🛑 Shutting down multi-agent system...');
      server.close(() => {
        logger.info('✅ Multi-agent system stopped');
        process.exit(0);
      });
    });

  } catch (error) {
    logger.error('💥 Failed to start multi-agent system', { 
      error: error instanceof Error ? error : new Error(String(error)) 
    });
    process.exit(1);
  }
}

if (require.main === module) {
  startWorkingMultiAgentSystem().catch(console.error);
}